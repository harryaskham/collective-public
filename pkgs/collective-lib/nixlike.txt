# Import shortcut
(load-file "nixlike.el")

# Quick toggles

(setq debug-on-error t)
(setq debug-on-error nil)

(setq nixlike-nix-variant 'nix)
(setq nixlike-nix-variant 'tvix)

(setq nixlike-kill-repl-before-eval nil)
(setq nixlike-kill-repl-before-eval t)

(setq nixlike-mode 'shell)
(setq nixlike-mode 'repl)

(setq nixlike-nix-eval-strategy 'eval)
(setq nixlike-nix-eval-strategy 'instantiate)

(nixlike-eval-command 'nix "123" 0 t nil)

<nix>
collective-lib._tests.run {}
</nix>

<nix>
functions._tests.run {}
</nix>

<nix>
typelib._tests.run {}
</nix>

<nix>
parser._tests.run {}
</nix>

<nix>
parser.parse ''{a = id} . a 1''
</nix>

<nix>
({a = add 10;} . a or (add 1)) 2
</nix>

<nix>
parser.parse ''x.f 1''
</nix>
<nix>
eval._tests.debug {}
</nix>

<nix>
{ inherit ({}) a; }
</nix>
<nix>
let f = { a ? 1, b, ... }: x: let data = rec { aa = a; inherit b x; sum = aa + b + x; }; in data.sum; in f {b = 4;} 5
</nix>
<nix>
with parser;
evalAST (parseAST "let a = {b = 1;}; in { inherit a; }")
#parseAST "let f = xs: x: let data = rec { aa = a; sum = aa + b + x; }; in data.sum; in f {b = 4;} 5"
#parseAST "let f = xs: x: let data = rec { aa = a; inherit b x; sum = aa + b + x; }; in data.sum; in f {b = 4;} 5"
#parse "let f = { a ? 1, b, ... }: x: let data = rec { aa = a; inherit ({}) x; sum = aa + b + x; }; in data.sum; in f {b = 4;} 5"
#parse "let f = { a ? 1, b, ... }: x: let data = rec { aa = a; sum = aa + b + x; }; in data.sum; in f {b = 4;} 5"
</nix>

<nix>
with parser; evalAST (parseAST "let f = {x ? 1, a ? 2, ...}: y: [x y]; in f {x = 3; abc = 1;}") 2
</nix>

<nix>
({a ? let x = 1; in x}: a) {}
</nix>

<nix>
let xs = {a = 1;};
    x = "a";
in { inherit (xs) "a"; }
</nix>

<nix>
with parser;
evalASTEither (parseAST "(1 == 1)")
</nix>
<nix>
log._tests.run {}
</nix>
<nix>
eval._tests.run {}
</nix>
<nix>
eval._tests.debug {}
</nix>
<nix>
parser._tests.debug {}
</nix>
<nix>
-{a=1;}.a or {}.a or 1
</nix>

<nix>
#parser.parse ''f 1 2 3''
parser.parse ''a.b or d e''
#parser.parse ''a . b or (c d)''
#parser.parse ''a.b or id 1''
</nix>

<nix>
parser.parse ''{a = 1;}.a or const 1 2''
#with parser; (parseExpr ''{a = 1 + 1;}'')
</nix>
<nix>
#with parser; parse ''let f = x: x + 1; in f (if true then 42 else 0)''
with parser; parseExpr ''a.b.c.''${d}."e".f''
#with parser; parseExpr ''1 == 2 == 3''
</nix>

<nix>
eval._tests.run {}
</nix>
<nix>
parser._tests.run {}
</nix>
<nix>
#with parser; parse (builtins.readFile "/home/harry/collective/collective-public/pkgs/collective-lib/parser/default.nix")
with parser; parse "<nixpkgs>"
</nix>
<nix>
(throw "").a.b.c or 1
</nix>

<nix>
(parser.N.string "ok")
</nix>
<nix>
let f = dispatch { int = add 1; float = x: x - 1; };

in {}.a or f 1 1.0

</nix>
<nix>
#parser.parse ''let xs = { a = 1; b = 2;  }; f = {a, c ? 3, ...}: a + c; in { r = f xs;  }.r or null''
#eval ''let xs = { a = 1; b = 2;  }; f = {a, c ? 3, ...}: a + c; in { r = f xs;  }.r or null''
eval ''(import <nixpkgs> {}).lib.genAttrs toString 10''
</nix>

<nix>
eval.ast.runAST (parser.parse "1")
</nix>
<nix>
eval._tests.debug {}
</nix>
<nix>
eval._tests.run {}
</nix>
<nix>
with eval.monad;
getM (Eval.pure 1)
</nix>
<nix>
parser._tests.debug {}
</nix>
<nix>
eval._tests.debug {}
</nix>
<nix>
eval._tests.run {}
</nix>
<nix>
functions._tests.run {}
</nix>
<nix>
parser.parsec
</nix>
<nix>
eval._tests.debug {}
</nix>
<nix>
attrsets._tests.debug {}
</nix>

<nix>
with parser;
toString (parse "a: b: { x = c: 123; }")
</nix>


<nix>
(tests.testModule (import ../../modules/agnostic/unexpected-keyboard)).debug {}
</nix>

<nix>
(import ../../modules { inherit collective-lib; })
</nix>

<nix>
let
  uk = import ../../modules/nix-on-droid/unexpected-keyboard;
  fakeModule = {...}: {
    options.environment.etc = mkOption { type = types.attrsOf (types.attrsOf types.str); default = {};  };
    options.termux.sharedDir.copy = mkOption { type = types.attrsOf types.str; default = {};  };
  };
  cfg = {...}: {
    services.unexpected-keyboard = {
      enable = true;
      _enableTests = true;
    };
  };
in
  (evalModules {
    specialArgs = {
      inherit lib collective-lib;
    };
    modules = [ fakeModule uk cfg ] ;
  #}).config.services.unexpected-keyboard._tests.run {}
  }).config.services.unexpected-keyboard._tests.debug {}
</nix>

<nix>
lists._tests.run {}
</nix>
<nix>
eval.monad._tests.run {}
</nix>
<nix>
eval.monad._tests.debug {}
</nix>
<nix>
strings._tests.run {}
</nix>
<nix>
functions._tests.run {}
</nix>
<nix>
functionArgs (a: 123)
</nix>
<nix>
({a,...}@b: b) {a=1; c=3;}
</nix>

<nix>
with eval.ast; with eval.monad; with parser;
(eval "[ 1 1]").right
</nix>

<nix>
with eval.ast; with eval.monad; with parser;
getT (do (Eval.pure 123))
</nix>

<nix>
with eval.ast; with eval.monad; with parser;
let do = simpleDo_ Eval;
    a = do
      { a = do.pure 123; }
      { b = {a}: do.pure (a + 1); }
      ( {a, b}: do.pure (a + b) );
in a
</nix>

<nix>
with eval.ast; with eval.monad; with parser;
((Eval.pure 123).bind (_: Eval.throws (Throw ""))).catch (_: Eval.pure 123)
</nix>
<nix>
is EvalError E
</nix>
<nix>
with eval.ast; with eval.monad; with parser;
((((void ((((Eval.pure 123).set (EvalState {x = 3;})).getScope {}).bind(s: Eval.pure (s.x + 3)))).getScope {}).getScope {}).throws (RuntimeError ""))
</nix>
<nix>
with eval.ast; with eval.monad; with parser;
let m =
  Eval.do
    ({_}: _.prependScope {abc = 1;})
    {xxx = {_}: _.getScope {};}
    ({xxx, _, ...}: _.pure xxx)
  ;
in m.run {}
</nix>
<nix>
with eval.ast; with eval.monad; with parser;
(Eval.pure unit).prependScope {a = 1;}
  ({_}: _.prependScope {a = 1;})
let m = Eval.do
  ({_}: _.prependScope {a = 1;})
  ({_}: _.getScope {})
  ;
in m.run {}
</nix>
<nix>
with eval.monad;
let a = Eval.pure 123;
in ((a.set (EvalState { a = 1;})).modify id).get {}
</nix>
<nix>
with eval.monad;
(Eval.do { a = Eval.pure 1; } ({a, _}: _.pure 1)).__m.bind(a: Eval.do (Eval.pure unit))
</nix>

<nix>
with eval.monad;
let Int = {
  __toString = self: "Int";
  check = x: isInt (x.x or null);
  __functor = self: x: {
    inherit x;
    __type = Int;
    __toString = self: "Int ${_p_ self.x}";
  };
}; in

(Eval Int).pure (Int 1)
</nix>
